import rospy
from std_msgs.msg import String
import pygame
import math
import time
from time import sleep

# Import optitrack functions
import sys
# add the upper directory
sys.path.append("..")
# include optitrack module
from src_optitrack.optitrack import *
from PID import PID

# Global variables
RB_ID = 5 # rigid-body ID in the optitrack system
distance = 1000
velocity = '000'
angle = '000'
opti = OptiTrackInterface()
pid_output=0

dest = (1.5, 1.5)
ref_yaw = 0.0  #set reference yaw = 0
ref_distance = 0.0
def get_vec_ang(vec):
    if (0 == vec[0]): # vx = 0
        if (vec[1] > 0):
	    return 90
	elif (vec[1] < 0):
	    return 270
	else:
	    return 0
    else: # vx != 0
	if(0 == vec[1]): # vy = 0
	    if(vec[0] > 0):
		return 0
	    else:
		return 180
	else: # vx != 0, vy != 0
	    temp = math.fabs(vec[1]/vec[0])
	    if ( vec[0]>0 and vec[1]>0 ): # 1
		return math.atan(temp) * 180 / math.pi
	    elif ( vec[0]<0 and vec[1]>0 ): # 2
		return (math.pi-math.atan(temp)) * 180 / math.pi
	    elif ( vec[0]<0 and vec[1]<0 ): # 3
		return (math.pi+math.atan(temp)) * 180 / math.pi
	    else:
		return (2*math.pi-math.atan(temp)) * 180 / math.pi

def send_PID_command():

    global distance,velocity,angle,pid_output,yaw_degree,move_command

    distance = math.sqrt((pos[0]-dest[0])*(pos[0]-dest[0]) + (pos[1]-dest[1])*(pos[1]-dest[1]))

    desire_ang = get_vec_ang((dest[0]-pos[0], dest[1]-pos[1]))

    angle = str(int(desire_ang)).zfill(3)
    
    if p.update(distance)<300: # maximum speed

    	pid_output=str(int(p.update(distance)))

    else:

    	pid_output='300'

    angle_velocity='0001'#for postion testing purposes, set angle velocity to 0 

    move_command='@a'+pid_output.zfill(3)+angle+angle_velocity+'?!'

    #move_command='@a0000000001?!' 
    

if __name__ == '__main__': 
    rospy.init_node('pc', anonymous=True)
    pub = rospy.Publisher('joystick',String,queue_size = 14)    #send command data to robot
    p=PID(5,0.01,0) #initiallize PID
    p.setPoint(ref_distance)    #intialize reference yaw point

    while(True):
	pos = opti.get_pos(RB_ID)
	print distance
	if distance >0.01:
    		send_PID_command()
	else:
		p.selferror=0.0
		move_command='@a0000000001?!' 
	print move_command
	pub.publish(move_command)
        sleep(0.0001)
    

